import pandas as pd
import re

def parse_input(data):
    # Regex to extract numbers from a string including scientific notation
    number_extractor = re.compile(r"[\d\.]+(?:e-?\d+)?")
    
    # Extract the number lists
    seen_scores = list(map(float, number_extractor.findall(data.split("Seen Scores: ")[1].split("Unseen Scores:")[0])))
    unseen_scores = list(map(float, number_extractor.findall(data.split("Unseen Scores: ")[1].split("Seen Minks:")[0])))
    seen_minks = list(map(float, number_extractor.findall(data.split("Seen Minks: ")[1].split("Unseen Minks:")[0])))
    unseen_minks = list(map(float, number_extractor.findall(data.split("Unseen Minks: ")[1])))
    
    return seen_scores, unseen_scores, seen_minks, unseen_minks

def create_csv(seen_scores, unseen_scores, seen_minks, unseen_minks):
    # Create DataFrames
    seen_df = pd.DataFrame({
        "Type": "Seen",
        "Scores": seen_scores,
        "Minks": seen_minks
    })
    
    unseen_df = pd.DataFrame({
        "Type": "Unseen",
        "Scores": unseen_scores,
        "Minks": unseen_minks
    })
    
    # Concatenate DataFrames
    combined_df = pd.concat([seen_df, unseen_df], ignore_index=True)
    
    # Save to CSV
    combined_df.to_csv("output.csv", index=False)
    print("CSV file has been created named 'output.csv'.")

# Sample data input
data = """Seen Scores: [1.0625, 0.9921568632125854, 1.0] Unseen Scores: [0.9888268113136292, 1.0068964958190918] Seen Minks: [2.738088369369507e-07, 1.7974525690078735e-07] Unseen Minks: [3.948807716369629e-07, 5.62518835067749e-07]"""
data2 = """Seen Scores: [1.0625, 0.9921568632125854, 1.0, 0.9646017551422119, 0.891791045665741, 1.0057803392410278, 0.9714285731315613, 1.0443037748336792, 0.9650349617004395, 0.8978873491287231, 0.961240291595459, 1.025477647781372, 0.9270833134651184, 1.0289855003356934, 0.9679487347602844, 0.9850746393203735, 0.9662162065505981, 0.993630588054657, 1.0409356355667114, 1.034482717514038, 0.931506872177124, 0.9105691313743591, 0.9642857313156128, 0.9419642686843872, 1.0, 1.023391842842102, 0.9370370507240295, 1.0, 0.9930070042610168, 0.9617834687232971, 1.0571428537368774, 0.9523809552192688, 1.0119760036468506, 0.9724409580230713, 0.9015747904777527, 0.9431818127632141, 0.9398496150970459, 0.98591548204422, 0.949999988079071, 0.978723406791687, 0.9274193644523621, 0.9590643048286438, 0.9456067085266113, 1.077519416809082, 0.9720279574394226, 0.9696969985961914, 0.9383561611175537, 0.9426751732826233, 1.0, 0.8965517282485962, 1.088435411453247]
Unseen Scores: [0.9888268113136292, 1.0068964958190918, 0.9806451797485352, 0.9623655676841736, 1.0182926654815674, 1.0199999809265137, 1.049180269241333, 1.0860927104949951, 1.0370370149612427, 0.9932885766029358, 1.0306748151779175, 0.9503105878829956, 1.0095694065093994, 1.013157844543457, 0.9735099077224731, 0.9873417615890503, 0.9769230484962463, 1.03125, 1.0839694738388062, 1.0660377740859985, 0.9101123809814453, 1.0126582384109497, 0.9480000138282776, 1.0155038833618164, 0.9932432174682617, 1.0, 1.0214285850524902, 1.0054644346237183, 1.0, 0.9943181872367859, 1.0040160417556763]
Seen Minks: [2.738088369369507e-07, 1.7974525690078735e-07, 2.3655593395233154e-07, 1.7974525690078735e-07, 1.150183379650116e-07, 8.530914783477783e-07, 4.209578037261963e-07, 4.4330954551696777e-07, 5.178153514862061e-07, 1.4062970876693726e-07, 1.3131648302078247e-07, 2.477318048477173e-07, 1.0654330253601074e-06, 2.2444874048233032e-07, 2.086162567138672e-07, 9.73232090473175e-08, 3.1478703022003174e-07, 5.364418029785156e-07, 2.7939677238464355e-07, 1.564621925354004e-07, 1.3224780559539795e-07, 1.7229467630386353e-07, 2.7008354663848877e-07, 5.4016709327697754e-08, 6.556510925292969e-07, 1.8067657947540283e-07, 1.387670636177063e-07, 1.1688098311424255e-07, 2.682209014892578e-07, 2.0116567611694336e-07, 9.080395102500916e-08, 1.0570511221885681e-07, 2.5704503059387207e-07, 3.46451997756958e-07, 1.2759119272232056e-07, 7.543712854385376e-08, 1.909211277961731e-07, 2.4400651454925537e-07, 1.1175870895385742e-07, 6.100162863731384e-08, 3.841705620288849e-08, 9.173527359962463e-08, 2.4959444999694824e-07, 5.471520125865936e-08, 1.825392246246338e-07, 3.781169652938843e-07, 3.9674341678619385e-07, 5.997717380523682e-07, 3.4831464290618896e-07, 6.966292858123779e-07, 2.738088369369507e-07]
Unseen Minks: [3.948807716369629e-07, 5.62518835067749e-07, 3.203749656677246e-07, 3.334134817123413e-07, 6.370246410369873e-07, 2.1327286958694458e-07, 4.0046870708465576e-07, 5.62518835067749e-07, 2.0954757928848267e-07, 6.752088665962219e-08, 3.4086406230926514e-07, 6.556510925292969e-07, 2.514570951461792e-07, 1.434236764907837e-07, 3.91155481338501e-07, 2.1606683731079102e-07, 5.736947059631348e-07, 1.7881393432617188e-07, 1.0151416063308716e-07, 4.563480615615845e-08, 1.0281801223754883e-06, 1.4528632164001465e-07, 1.1594966053962708e-07, 1.424923539161682e-07, 5.066394805908203e-07, 5.62518835067749e-07, 1.1688098311424255e-07, 5.364418029785156e-07, 1.5087425708770752e-07, 2.6635825634002686e-07, 2.253800630569458e-07]
"""
# Parse the input data
seen_scores, unseen_scores, seen_minks, unseen_minks = parse_input(data2)

# Create CSV from the parsed data
create_csv(seen_scores, unseen_scores, seen_minks, unseen_minks)
